#!/usr/bin/env sh
. "$(dirname -- "$0")/_/husky.sh"

# Check for remote changes and pull if necessary
echo "Checking for remote changes..."
git fetch origin

LOCAL=$(git rev-parse @)
REMOTE=$(git rev-parse @{u})
BASE=$(git merge-base @ @{u})

if [ $REMOTE = $BASE ]; then
    echo "Local branch is ahead or up to date. Proceeding..."
elif [ $LOCAL = $BASE ]; then
    echo "Remote changes detected. Pulling updates..."
    git pull || { echo "Pull failed. Please resolve conflicts and try again."; exit 1; }
else
    echo "Branches have diverged. Please resolve conflicts manually."
    exit 1
fi

# dart test
dart analyze

# Get the current version from pubspec.yaml
current_version=$(grep '^version:' pubspec.yaml | awk '{print $2}')

# Split the version into major, minor, and patch
IFS='+' read -r version build <<< "$current_version"
IFS='.' read -r major minor patch <<< "$version"

# Increment the patch version
new_patch=$((patch + 1))
new_version="$major.$minor.$new_patch+$build"

# Update pubspec.yaml with the new version
if [ "$(uname)" = "Darwin" ]; then
    # macOS
    sed -i '' "s/^version: $current_version/version: $new_version/" pubspec.yaml
else
    # Linux
    sed -i "s/^version: $current_version/version: $new_version/" pubspec.yaml
fi

# Stage the updated pubspec.yaml
git add pubspec.yaml
